import { useEffect, useMemo, useRef, useState } from 'react'
import { playCorrect } from '../lib/sfx'
import { addStars } from '../lib/progress'

type Level = 'facil' | 'medio' | 'dificil'
const BANK: Record<Level, string[]> = {
  facil: [
    'Eu gosto de estudar.',
    'Aprender √© ser her√≥i.',
    'A escola √© legal.',
    'Ler √© divertido.',
    'Eu amo matem√°tica.',
    'Gosto de escrever hist√≥rias.',
    'A professora √© muito gentil.',
    'Eu ajudo meus amigos.',
    'Brincar no recreio √© bom.',
    'Hoje fiz a li√ß√£o de casa.',
    'Eu cuido do meu material.',
    'Beber √°gua faz bem.',
    'Dormir cedo ajuda a aprender.',
    'Eu respeito meus colegas.',
    'O caderno est√° organizado.',
    'Eu gosto de ci√™ncia.',
    'A leitura traz conhecimento.',
    'Contar at√© dez √© f√°cil.',
    'Eu escrevo com aten√ß√£o.',
    'O quadro √© verde na sala.',
  ],
  medio: [
    'Programar √© divertido e desafiador.',
    'Ler livros aumenta muito o saber.',
    'Os her√≥is sempre ajudam os amigos.',
    'Estudar todos os dias melhora muito.',
    'A pr√°tica constante melhora a habilidade de digitar.',
    'Organiza√ß√£o di√°ria facilita a vida na escola.',
    'Projetos em grupo ensinam colabora√ß√£o e respeito.',
    'A curiosidade abre portas para novas descobertas.',
    'Anotar ideias r√°pidas evita que elas se percam.',
    'Resolver problemas exige calma e paci√™ncia.',
    'A revis√£o do conte√∫do fixa melhor a mem√≥ria.',
    'Uma boa postura evita dores ao estudar.',
    'Planejar o estudo ajuda a cumprir metas.',
    'A tecnologia pode ajudar muito na aprendizagem.',
    'Reler o texto melhora a compreens√£o global.',
    'Treinar digita√ß√£o aumenta a velocidade com precis√£o.',
    'Aprender com erros √© parte do processo.',
    'Dividir tarefas grandes em partes menores ajuda.',
    'Escrever um pouco por dia melhora a flu√™ncia.',
    'Leitura em voz alta melhora a dic√ß√£o e confian√ßa.',
  ],
  dificil: [
    'A curiosidade √© o pavio na vela do aprendizado.',
    'A pr√°tica constante transforma esfor√ßo em habilidade.',
    'Disciplina √© liberdade, estudo √© poder.',
    'Persist√™ncia silenciosa constr√≥i resultados extraordin√°rios ao longo do tempo.',
    'Foco absoluto reduz o ru√≠do e eleva a qualidade do estudo.',
    'Metas claras orientam a a√ß√£o e medem o progresso real.',
    'Leitura cr√≠tica separa opini√£o de fato com precis√£o.',
    'S√≠ntese eficaz transforma informa√ß√£o em conhecimento aplic√°vel.',
    'Erros analisados viram mapas para a pr√≥xima tentativa.',
    'Aten√ß√£o plena reduz distra√ß√µes e amplia a reten√ß√£o.',
    'Vocabul√°rio rico expande o alcance do pensamento.',
    'Tempo bem gerido multiplica as oportunidades de aprender.',
    'Repeti√ß√£o espa√ßada fortalece a mem√≥ria de longo prazo.',
    'Analogias iluminam conceitos complexos com clareza.',
    'Autoria consciente d√° voz √∫nica √†s suas ideias.',
    'Prototipar cedo revela falhas ocultas no racioc√≠nio.',
    'Argumentos s√≥lidos exigem evid√™ncias e l√≥gica consistentes.',
    'Dom√≠nio t√©cnico floresce com pr√°tica deliberada di√°ria.',
    'Reflex√£o met√≥dica transforma experi√™ncia em sabedoria.',
  ],
}

export default function TypingSpeed() {
  const [level, setLevel] = useState<Level>('facil')
  const phrases = useMemo(()=> BANK[level], [level])
  const [practice, setPractice] = useState(false)
  const [custom, setCustom] = useState('Digite seu pr√≥prio texto aqui...')
  const [text, setText] = useState('')
  const [started, setStarted] = useState(false)
  const [seconds, setSeconds] = useState(0)
  const timerRef = useRef<number | null>(null)
  const [target, setTarget] = useState(phrases[0])

  useEffect(()=>{
    if (started) {
      timerRef.current = window.setInterval(()=> setSeconds(s=>s+1), 1000)
    }
    return ()=> { if (timerRef.current) window.clearInterval(timerRef.current) }
  }, [started])

  useEffect(()=>{ setTarget(phrases[0]); setText(''); setSeconds(0); setStarted(false) }, [phrases])

  const complete = text === target
  const [awarded, setAwarded] = useState(false)
  useTypingAutoAdvance(!practice && complete, target, setTarget, () => { setText(''); setSeconds(0); setStarted(false); setAwarded(false) }, phrases)

  useEffect(()=>{
    if (complete && !awarded) {
      setAwarded(true)
      playCorrect()
      addStars('typing', 1)
    }
  }, [complete, awarded])

  function restart() {
    setText('')
    setSeconds(0)
    setStarted(false)
    if (practice) {
      setTarget(custom)
    } else {
      setTarget(phrases[Math.floor(Math.random()*phrases.length)])
    }
  }

  return (
    <div className="container">
      <div className="game">
        <h2>Digita√ß√£o ‚å®Ô∏è</h2>
        <div className="row" style={{ alignItems: 'center' }}>
          <label>N√≠vel:</label>
          <select value={level} onChange={e=> setLevel(e.target.value as Level)}>
            <option value="facil">F√°cil</option>
            <option value="medio">M√©dio</option>
            <option value="dificil">Dif√≠cil</option>
          </select>
          <label style={{ marginLeft: 12 }}>Pr√°tica livre:</label>
          <select value={String(practice)} onChange={e=> { const v = e.target.value==='true'; setPractice(v); if (v) setTarget(custom); else setTarget(phrases[0]); setText(''); setSeconds(0); setStarted(false) }}>
            <option value="false">N√£o</option>
            <option value="true">Sim</option>
          </select>
          <span style={{ marginLeft: 'auto' }}>Tempo: <strong>{seconds}s</strong></span>
        </div>
        <div style={{ height: 8 }} />
        {practice ? (
          <div className="row" style={{ alignItems: 'center', gap: 8 }}>
            <label style={{ whiteSpace: 'nowrap' }}>Texto da pr√°tica:</label>
            <input style={{ flex: 1 }} value={custom} onChange={e=> { setCustom(e.target.value); if (practice) setTarget(e.target.value) }} />
          </div>
        ) : null}
        <p>Digite a frase:</p>
        <p style={{ fontWeight: 600 }}><em>{target}</em></p>
        <div className="row">
          <button onClick={()=>{ setStarted(true); setText(''); setSeconds(0) }} className="accent">Iniciar</button>
          <button onClick={restart} className="secondary">Reiniciar</button>
          {!practice && <button className="secondary" onClick={()=> setTarget(phrases[Math.floor(Math.random()*phrases.length)])}>Pr√≥xima frase</button>}
        </div>
        <textarea rows={4} value={text} onChange={e=>setText(e.target.value)} style={{ width: '100%', marginTop: 8 }} />
        <p>{complete ? 'Perfeito! üéâ' : 'Continue, voc√™ est√° indo bem!'}</p>
      </div>
    </div>
  )
}

// Avan√ßa automaticamente para a pr√≥xima frase ap√≥s concluir
export function useTypingAutoAdvance(
  complete: boolean,
  target: string,
  setTarget: (v: string)=> void,
  reset: ()=> void,
  phrases: string[],
) {
  useEffect(()=>{
    if (!complete) return
    const t = setTimeout(()=>{
      const idx = phrases.indexOf(target)
      const next = phrases[(idx >= 0 ? idx : 0) + 1 >= phrases.length ? 0 : (idx + 1)]
      setTarget(next)
      reset()
    }, 800)
    return ()=> clearTimeout(t)
  }, [complete, target, setTarget, reset, phrases])
}

function countCorrectChars(input: string, target: string) {
  let n = 0
  for (let i = 0; i < input.length && i < target.length; i++) {
    if (input[i] === target[i]) n++
  }
  return n
}